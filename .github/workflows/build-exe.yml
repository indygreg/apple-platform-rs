name: Build a binary

on:
  workflow_call:
    inputs:
      bin:
        description: Name of binary to build
        required: true
        type: string
      extra_build_args_linux:
        description: Extra argumnets to pass to `cargo build` on Linux
        required: false
        type: string
      extra_build_args_macos:
        description: Extra arguments to pass to `cargo build` on Windows
        required: false
        type: string
      extra_build_args_windows:
        description: Extra arguments to pass to `cargo build` on macOS
        required: false
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        target:
          - os: 'ubuntu-22.04'
            triple: 'aarch64-unknown-linux-musl'
            cross: true
          - os: 'ubuntu-22.04'
            triple: 'x86_64-unknown-linux-musl'
          - os: 'macos-11'
            triple: 'aarch64-apple-darwin'
          - os: 'macos-11'
            triple: 'x86_64-apple-darwin'
          - os: 'windows-2022'
            triple: 'i686-pc-windows-msvc'
          - os: 'windows-2022'
            triple: 'x86_64-pc-windows-msvc'
    runs-on: ${{ matrix.target.os }}
    env:
      IN_CI: '1'
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SCCACHE_BUCKET: 'apple-platform-rs-sccache'
      SCCACHE_S3_USE_SSL: '1'
      # Prevent sccache server from stopping due to inactivity.
      SCCACHE_IDLE_TIMEOUT: '0'

      # This forces the lzma-sys crate to link liblzma statically. Ideally we'd do
      # this with a crate feature. But the xz2 crate didn't expose that feature at the
      # time this workaround was introduced.
      LZMA_API_STATIC: '1'
    steps:
      - uses: actions/checkout@v3

      - name: Conditionally Enable sccache
        shell: bash
        run: |
          if [ -n "${AWS_SECRET_ACCESS_KEY}" ]; then
            echo "enabling sccache"
            echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          fi

      - uses: ./.github/actions/rust-bootstrap
        with:
          rust_toolchain: stable
          rust_target: ${{ matrix.target.triple }}

      - uses: actions-rs/install@v0.1
        if: matrix.target.cross
        with:
          crate: cross
          version: latest

      - name: Build
        shell: bash
        run: |
          if [ "${{ matrix.target.triple }}" = "aarch64-apple-darwin" ]; then
            export MACOSX_DEPLOYMENT_TARGET=11.0
          elif [ "${{ matrix.target.triple }}" = "x86_64-apple-darwin" ]; then
            export MACOSX_DEPLOYMENT_TARGET=10.9
          fi

          if [ -n "${{ matrix.target.cross }}" ]; then
            CARGO=cross
          else
            CARGO=cargo
          fi

          case "${{ matrix.target.triple }}" in
            *linux*)
              EXTRA_BUILD_ARGS=${{ inputs.extra_build_args_linux }}
              ;;
            *apple-darwin*)
              EXTRA_BUILD_ARGS=${{ inputs.extra_build_args_macos }}
              ;;
            *windows*)
              EXTRA_BUILD_ARGS=${{ inputs.extra_build_args_windows }}
              ;;
            *)
              ;;
          esac

          $CARGO build --release --bin ${{ inputs.bin }} --target ${{ matrix.target.triple }} ${EXTRA_BUILD_ARGS}

          mkdir upload
          cp target/${{ matrix.target.triple }}/release/${{ inputs.bin }}* upload/
          sccache --stop-server

      - name: Upload (non-Windows)
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: exe-${{ inputs.bin }}-${{ matrix.target.triple }}
          path: upload/${{ inputs.bin }}

      - name: Upload (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: exe-${{ inputs.bin }}-${{ matrix.target.triple }}
          path: upload/${{ inputs.bin }}.exe

  macos-universal:
    needs:
      - build
    runs-on: 'macos-11'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: ./.github/actions/install-just

      - name: Download aarch64 executable
        uses: actions/download-artifact@v3
        with:
          name: exe-${{ inputs.bin }}-aarch64-apple-darwin
          path: ${{ inputs.bin }}-aarch64

      - name: Download x86-64 executable
        uses: actions/download-artifact@v3
        with:
          name: exe-${{ inputs.bin }}-x86_64-apple-darwin
          path: ${{ inputs.bin }}-x86-64

      - name: Produce Universal Binary
        run: |
          just actions-macos-universal ${{ inputs.bin }}

      - name: Upload Universal Executable
        uses: actions/upload-artifact@v2
        with:
          name: exe-${{ inputs.bin }}-macos-universal
          path: uploads/${{ inputs.bin }}
